//! Raw bindings to the functions exported by the WHY2025 badge
//!
//! ## Example
//!
//! ```rust
//! #![no_std]
//!
//! unsafe {
//!     why2025_badge_sys::printf(b"Hello, world!\n\0".as_ptr());
//! }
//! ```
//!
//! The bindings are autogenerated from the headers present in the firmware, so they are not exactly idiomatic rust.
//!
//! The symbols definitely need more documentation. If you want to add some, please add it to the C code in the firmware repository, it will get picked up when rebuilding lib.rshift
//! 
//! ## Interesting symbols
//!
//! * [printf]
//! * [window_create]
//! * [window_framebuffer_create]
//! * [window_present]

#![no_std]
#![allow(nonstandard_style)]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(transparent)]
pub struct __BindgenFloat16(pub u16);
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int_least64_t = ::core::ffi::c_longlong;
pub type __intmax_t = ::core::ffi::c_longlong;
pub type __uintmax_t = ::core::ffi::c_ulonglong;
unsafe extern "C" {
    pub fn cacos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cacosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn casin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn casinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn catan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn catanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn ccos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ccosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn csin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn csinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn ctan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ctanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn cacosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cacoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn casinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn casinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn catanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn catanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn ccosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ccoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn csinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn csinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn ctanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ctanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn cexp(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cexpf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn clog(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn clogf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn cabs(arg1: __BindgenComplex<f64>) -> f64;
}
unsafe extern "C" {
    pub fn cabsf(arg1: __BindgenComplex<f32>) -> f32;
}
unsafe extern "C" {
    pub fn cpow(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cpowf(arg1: __BindgenComplex<f32>, arg2: __BindgenComplex<f32>)
    -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn csqrt(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn csqrtf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn carg(arg1: __BindgenComplex<f64>) -> f64;
}
unsafe extern "C" {
    pub fn cargf(arg1: __BindgenComplex<f32>) -> f32;
}
unsafe extern "C" {
    pub fn cimag(arg1: __BindgenComplex<f64>) -> f64;
}
unsafe extern "C" {
    pub fn cimagf(arg1: __BindgenComplex<f32>) -> f32;
}
unsafe extern "C" {
    pub fn conj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn conjf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn cproj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cprojf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn creal(arg1: __BindgenComplex<f64>) -> f64;
}
unsafe extern "C" {
    pub fn crealf(arg1: __BindgenComplex<f32>) -> f32;
}
unsafe extern "C" {
    pub fn clog10(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn clog10f(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn csqrtl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cabsl(arg1: __BindgenComplex<f64>) -> u128;
}
unsafe extern "C" {
    pub fn cprojl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn creall(arg1: __BindgenComplex<f64>) -> u128;
}
unsafe extern "C" {
    pub fn conjl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cimagl(arg1: __BindgenComplex<f64>) -> u128;
}
unsafe extern "C" {
    pub fn cargl(arg1: __BindgenComplex<f64>) -> u128;
}
unsafe extern "C" {
    pub fn casinl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cacosl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn catanl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ccosl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn csinl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ctanl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cacoshl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn casinhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn catanhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ccoshl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn csinhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn ctanhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cexpl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn clogl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn cpowl(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>)
    -> __BindgenComplex<f64>;
}
pub type locale_t = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn isalnum(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isalpha(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iscntrl(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isdigit(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isgraph(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn islower(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isprint(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ispunct(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isspace(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isupper(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isxdigit(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn tolower(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn toupper(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isblank(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isascii(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn toascii(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isalnum_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isalpha_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isblank_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iscntrl_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isdigit_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isgraph_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn islower_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isprint_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ispunct_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isspace_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isupper_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isxdigit_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn tolower_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn toupper_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isascii_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn toascii_l(c: ::core::ffi::c_int, l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub static _ctype_b: [::core::ffi::c_char; 0usize];
}
pub type size_t = ::core::ffi::c_uint;
pub type wchar_t = ::core::ffi::c_int;
pub type fenv_t = size_t;
pub type fexcept_t = size_t;
unsafe extern "C" {
    pub fn feclearexcept(excepts: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fegetexceptflag(
        flagp: *mut fexcept_t,
        excepts: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fesetexceptflag(
        flagp: *const fexcept_t,
        excepts: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn feraiseexcept(excepts: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fetestexcept(excepts: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fegetround() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fesetround(rounding_mode: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fegetenv(envp: *mut fenv_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn feholdexcept(envp: *mut fenv_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fesetenv(envp: *const fenv_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn feupdateenv(envp: *const fenv_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fnmatch(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::core::ffi::c_char,
    pub has_arg: ::core::ffi::c_int,
    pub flag: *mut ::core::ffi::c_int,
    pub val: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of option"][::core::mem::size_of::<option>() - 16usize];
    ["Alignment of option"][::core::mem::align_of::<option>() - 4usize];
    ["Offset of field: option::name"][::core::mem::offset_of!(option, name) - 0usize];
    ["Offset of field: option::has_arg"][::core::mem::offset_of!(option, has_arg) - 4usize];
    ["Offset of field: option::flag"][::core::mem::offset_of!(option, flag) - 8usize];
    ["Offset of field: option::val"][::core::mem::offset_of!(option, val) - 12usize];
};
unsafe extern "C" {
    pub fn getopt(
        __argc: ::core::ffi::c_int,
        __argv: *const [*mut ::core::ffi::c_char; 0usize],
        __optstring: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getopt_long(
        __argc: ::core::ffi::c_int,
        __argv: *const [*mut ::core::ffi::c_char; 0usize],
        __shortopts: *const ::core::ffi::c_char,
        __longopts: *const option,
        __longind: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getopt_long_only(
        __argc: ::core::ffi::c_int,
        __argv: *const [*mut ::core::ffi::c_char; 0usize],
        __shortopts: *const ::core::ffi::c_char,
        __longopts: *const option,
        __longind: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
pub type wint_t = ::core::ffi::c_uint;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blksize_t = ::core::ffi::c_long;
pub type _off_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
pub type __dev_t = ::core::ffi::c_short;
pub type __uid_t = ::core::ffi::c_ushort;
pub type __gid_t = ::core::ffi::c_ushort;
pub type __ino_t = ::core::ffi::c_ushort;
pub type __mode_t = __uint32_t;
pub type __off_t = _off_t;
pub type _fpos_t = ::core::ffi::c_long;
pub type _ssize_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: ::core::ffi::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _mbstate_t__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [::core::ffi::c_uchar; 4usize],
    pub __ucs: __uint32_t,
    pub __ucs2: __uint16_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _mbstate_t__bindgen_ty_1"]
        [::core::mem::size_of::<_mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of _mbstate_t__bindgen_ty_1"]
        [::core::mem::align_of::<_mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: _mbstate_t__bindgen_ty_1::__wch"]
        [::core::mem::offset_of!(_mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: _mbstate_t__bindgen_ty_1::__wchb"]
        [::core::mem::offset_of!(_mbstate_t__bindgen_ty_1, __wchb) - 0usize];
    ["Offset of field: _mbstate_t__bindgen_ty_1::__ucs"]
        [::core::mem::offset_of!(_mbstate_t__bindgen_ty_1, __ucs) - 0usize];
    ["Offset of field: _mbstate_t__bindgen_ty_1::__ucs2"]
        [::core::mem::offset_of!(_mbstate_t__bindgen_ty_1, __ucs2) - 0usize];
};
impl ::core::fmt::Debug for _mbstate_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "_mbstate_t__bindgen_ty_1 {{ union }}")
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _mbstate_t"][::core::mem::size_of::<_mbstate_t>() - 8usize];
    ["Alignment of _mbstate_t"][::core::mem::align_of::<_mbstate_t>() - 4usize];
    ["Offset of field: _mbstate_t::__count"][::core::mem::offset_of!(_mbstate_t, __count) - 0usize];
    ["Offset of field: _mbstate_t::__value"][::core::mem::offset_of!(_mbstate_t, __value) - 4usize];
};
impl ::core::fmt::Debug for _mbstate_t {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "_mbstate_t {{ __count: {:?}, __value: {:?} }}",
            self.__count, self.__value
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __iconv_t {
    _unused: [u8; 0],
}
pub type _iconv_t = *mut __iconv_t;
pub type __clockid_t = ::core::ffi::c_ulong;
pub type __nl_item = __int32_t;
pub type __nlink_t = ::core::ffi::c_ushort;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_ulong;
pub type iconv_t = _iconv_t;
unsafe extern "C" {
    pub fn iconv_open(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> iconv_t;
}
unsafe extern "C" {
    pub fn iconv(
        arg1: iconv_t,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: *mut size_t,
        arg4: *mut *mut ::core::ffi::c_char,
        arg5: *mut size_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn iconv_close(arg1: iconv_t) -> ::core::ffi::c_int;
}
pub type fp_rnd = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn fpgetround() -> fp_rnd;
}
unsafe extern "C" {
    pub fn fpsetround(arg1: fp_rnd) -> fp_rnd;
}
pub type fp_except = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn fpgetmask() -> fp_except;
}
unsafe extern "C" {
    pub fn fpsetmask(arg1: fp_except) -> fp_except;
}
unsafe extern "C" {
    pub fn fpgetsticky() -> fp_except;
}
unsafe extern "C" {
    pub fn fpsetsticky(arg1: fp_except) -> fp_except;
}
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::core::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::core::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::core::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::core::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
pub type _wchar_t = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn imaxabs(arg1: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denomer: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        arg1: *const _wchar_t,
        arg2: *mut *mut _wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        arg1: *const _wchar_t,
        arg2: *mut *mut _wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn strtoimax_l(
        arg1: *const ::core::ffi::c_char,
        _restrict: *mut *mut ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
        arg3: locale_t,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax_l(
        arg1: *const ::core::ffi::c_char,
        _restrict: *mut *mut ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
        arg3: locale_t,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax_l(
        arg1: *const _wchar_t,
        _restrict: *mut *mut _wchar_t,
        arg2: ::core::ffi::c_int,
        arg3: locale_t,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax_l(
        arg1: *const _wchar_t,
        _restrict: *mut *mut _wchar_t,
        arg2: ::core::ffi::c_int,
        arg3: locale_t,
    ) -> uintmax_t;
}
pub type nl_item = __nl_item;
unsafe extern "C" {
    pub fn nl_langinfo(arg1: nl_item) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nl_langinfo_l(arg1: nl_item, arg2: locale_t) -> *mut ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::core::ffi::c_char,
    pub thousands_sep: *mut ::core::ffi::c_char,
    pub grouping: *mut ::core::ffi::c_char,
    pub int_curr_symbol: *mut ::core::ffi::c_char,
    pub currency_symbol: *mut ::core::ffi::c_char,
    pub mon_decimal_point: *mut ::core::ffi::c_char,
    pub mon_thousands_sep: *mut ::core::ffi::c_char,
    pub mon_grouping: *mut ::core::ffi::c_char,
    pub positive_sign: *mut ::core::ffi::c_char,
    pub negative_sign: *mut ::core::ffi::c_char,
    pub int_frac_digits: ::core::ffi::c_char,
    pub frac_digits: ::core::ffi::c_char,
    pub p_cs_precedes: ::core::ffi::c_char,
    pub p_sep_by_space: ::core::ffi::c_char,
    pub n_cs_precedes: ::core::ffi::c_char,
    pub n_sep_by_space: ::core::ffi::c_char,
    pub p_sign_posn: ::core::ffi::c_char,
    pub n_sign_posn: ::core::ffi::c_char,
    pub int_n_cs_precedes: ::core::ffi::c_char,
    pub int_n_sep_by_space: ::core::ffi::c_char,
    pub int_n_sign_posn: ::core::ffi::c_char,
    pub int_p_cs_precedes: ::core::ffi::c_char,
    pub int_p_sep_by_space: ::core::ffi::c_char,
    pub int_p_sign_posn: ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lconv"][::core::mem::size_of::<lconv>() - 56usize];
    ["Alignment of lconv"][::core::mem::align_of::<lconv>() - 4usize];
    ["Offset of field: lconv::decimal_point"]
        [::core::mem::offset_of!(lconv, decimal_point) - 0usize];
    ["Offset of field: lconv::thousands_sep"]
        [::core::mem::offset_of!(lconv, thousands_sep) - 4usize];
    ["Offset of field: lconv::grouping"][::core::mem::offset_of!(lconv, grouping) - 8usize];
    ["Offset of field: lconv::int_curr_symbol"]
        [::core::mem::offset_of!(lconv, int_curr_symbol) - 12usize];
    ["Offset of field: lconv::currency_symbol"]
        [::core::mem::offset_of!(lconv, currency_symbol) - 16usize];
    ["Offset of field: lconv::mon_decimal_point"]
        [::core::mem::offset_of!(lconv, mon_decimal_point) - 20usize];
    ["Offset of field: lconv::mon_thousands_sep"]
        [::core::mem::offset_of!(lconv, mon_thousands_sep) - 24usize];
    ["Offset of field: lconv::mon_grouping"]
        [::core::mem::offset_of!(lconv, mon_grouping) - 28usize];
    ["Offset of field: lconv::positive_sign"]
        [::core::mem::offset_of!(lconv, positive_sign) - 32usize];
    ["Offset of field: lconv::negative_sign"]
        [::core::mem::offset_of!(lconv, negative_sign) - 36usize];
    ["Offset of field: lconv::int_frac_digits"]
        [::core::mem::offset_of!(lconv, int_frac_digits) - 40usize];
    ["Offset of field: lconv::frac_digits"][::core::mem::offset_of!(lconv, frac_digits) - 41usize];
    ["Offset of field: lconv::p_cs_precedes"]
        [::core::mem::offset_of!(lconv, p_cs_precedes) - 42usize];
    ["Offset of field: lconv::p_sep_by_space"]
        [::core::mem::offset_of!(lconv, p_sep_by_space) - 43usize];
    ["Offset of field: lconv::n_cs_precedes"]
        [::core::mem::offset_of!(lconv, n_cs_precedes) - 44usize];
    ["Offset of field: lconv::n_sep_by_space"]
        [::core::mem::offset_of!(lconv, n_sep_by_space) - 45usize];
    ["Offset of field: lconv::p_sign_posn"][::core::mem::offset_of!(lconv, p_sign_posn) - 46usize];
    ["Offset of field: lconv::n_sign_posn"][::core::mem::offset_of!(lconv, n_sign_posn) - 47usize];
    ["Offset of field: lconv::int_n_cs_precedes"]
        [::core::mem::offset_of!(lconv, int_n_cs_precedes) - 48usize];
    ["Offset of field: lconv::int_n_sep_by_space"]
        [::core::mem::offset_of!(lconv, int_n_sep_by_space) - 49usize];
    ["Offset of field: lconv::int_n_sign_posn"]
        [::core::mem::offset_of!(lconv, int_n_sign_posn) - 50usize];
    ["Offset of field: lconv::int_p_cs_precedes"]
        [::core::mem::offset_of!(lconv, int_p_cs_precedes) - 51usize];
    ["Offset of field: lconv::int_p_sep_by_space"]
        [::core::mem::offset_of!(lconv, int_p_sep_by_space) - 52usize];
    ["Offset of field: lconv::int_p_sign_posn"]
        [::core::mem::offset_of!(lconv, int_p_sign_posn) - 53usize];
};
unsafe extern "C" {
    pub fn localeconv() -> *mut lconv;
}
unsafe extern "C" {
    pub fn uselocale(arg1: locale_t) -> locale_t;
}
unsafe extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn log(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn finite(arg1: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn finitef(arg1: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isinf(arg1: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isinff(arg1: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isnan(arg1: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isnanf(arg1: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn finitel(arg1: u128) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn infinity() -> f64;
}
unsafe extern "C" {
    pub fn nan(arg1: *const ::core::ffi::c_char) -> f64;
}
unsafe extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn ilogb(arg1: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::core::ffi::c_long) -> f64;
}
unsafe extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lrint(arg1: f64) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llrint(arg1: f64) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn round(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lround(arg1: f64) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llround(arg1: f64) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::core::ffi::c_long) -> f32;
}
unsafe extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lrintf(arg1: f32) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llrintf(arg1: f32) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lroundf(arg1: f32) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llroundf(arg1: f32) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
unsafe extern "C" {
    pub fn infinityf() -> f32;
}
unsafe extern "C" {
    pub fn nanf(arg1: *const ::core::ffi::c_char) -> f32;
}
unsafe extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ilogbf(arg1: f32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::core::ffi::c_int) -> u128;
}
unsafe extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::core::ffi::c_int) -> u128;
}
unsafe extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::core::ffi::c_long) -> u128;
}
unsafe extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lrintl(arg1: u128) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llrintl(arg1: u128) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn ilogbl(arg1: u128) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::core::ffi::c_int) -> u128;
}
unsafe extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lroundl(arg1: u128) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llroundl(arg1: u128) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
unsafe extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
unsafe extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::core::ffi::c_int) -> u128;
}
unsafe extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
unsafe extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn dremf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgamma_r(arg1: f64, arg2: *mut ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    pub fn lgammaf_r(arg1: f32, arg2: *mut ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ynf(arg1: ::core::ffi::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn jnf(arg1: ::core::ffi::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn sincos(arg1: f64, arg2: *mut f64, arg3: *mut f64);
}
unsafe extern "C" {
    pub fn sincosf(arg1: f32, arg2: *mut f32, arg3: *mut f32);
}
unsafe extern "C" {
    pub fn exp10(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow10(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp10f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn pow10f(arg1: f32) -> f32;
}
pub type regoff_t = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_t {
    pub re_magic: ::core::ffi::c_uint,
    pub re_nsub: size_t,
    pub re_endp: *const ::core::ffi::c_char,
    pub re_g: *mut re_guts,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of regex_t"][::core::mem::size_of::<regex_t>() - 16usize];
    ["Alignment of regex_t"][::core::mem::align_of::<regex_t>() - 4usize];
    ["Offset of field: regex_t::re_magic"][::core::mem::offset_of!(regex_t, re_magic) - 0usize];
    ["Offset of field: regex_t::re_nsub"][::core::mem::offset_of!(regex_t, re_nsub) - 4usize];
    ["Offset of field: regex_t::re_endp"][::core::mem::offset_of!(regex_t, re_endp) - 8usize];
    ["Offset of field: regex_t::re_g"][::core::mem::offset_of!(regex_t, re_g) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of regmatch_t"][::core::mem::size_of::<regmatch_t>() - 8usize];
    ["Alignment of regmatch_t"][::core::mem::align_of::<regmatch_t>() - 4usize];
    ["Offset of field: regmatch_t::rm_so"][::core::mem::offset_of!(regmatch_t, rm_so) - 0usize];
    ["Offset of field: regmatch_t::rm_eo"][::core::mem::offset_of!(regmatch_t, rm_eo) - 4usize];
};
unsafe extern "C" {
    pub fn regcomp(
        arg1: *mut regex_t,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn regerror(
        arg1: ::core::ffi::c_int,
        arg2: *const regex_t,
        arg3: *mut ::core::ffi::c_char,
        arg4: size_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn regexec(
        arg1: *const regex_t,
        arg2: *const ::core::ffi::c_char,
        arg3: size_t,
        arg4: *mut [regmatch_t; 0usize],
        arg5: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn regfree(arg1: *mut regex_t);
}
pub type in_addr_t = __uint32_t;
pub type blkcnt_t = __blkcnt_t;
pub type blksize_t = __blksize_t;
pub type clock_t = ::core::ffi::c_ulong;
pub type time_t = __int_least64_t;
pub type ino_t = __ino_t;
pub type ssize_t = _ssize_t;
pub type off_t = __off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = __pid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type clockid_t = __clockid_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum VISIT {
    preorder = 0,
    postorder = 1,
    endorder = 2,
    leaf = 3,
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
unsafe extern "C" {
    pub fn tdelete(
        arg1: *const ::core::ffi::c_void,
        arg2: *mut *mut ::core::ffi::c_void,
        arg3: __compar_fn_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn tdestroy(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    );
}
unsafe extern "C" {
    pub fn tfind(
        arg1: *const ::core::ffi::c_void,
        arg2: *mut *mut ::core::ffi::c_void,
        arg3: __compar_fn_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn tsearch(
        arg1: *const ::core::ffi::c_void,
        arg2: *mut *mut ::core::ffi::c_void,
        arg3: __compar_fn_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn twalk(
        arg1: *const ::core::ffi::c_void,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::core::ffi::c_void,
                arg2: VISIT,
                arg3: ::core::ffi::c_int,
            ),
        >,
    );
}
unsafe extern "C" {
    pub fn longjmp(__jmpb: *mut ::core::ffi::c_longlong, __retval: ::core::ffi::c_int) -> !;
}
unsafe extern "C" {
    pub fn setjmp(__jmpb: *mut ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type __ungetc_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __file {
    pub unget: __ungetc_t,
    pub flags: __uint8_t,
    pub put: ::core::option::Option<
        unsafe extern "C" fn(arg1: ::core::ffi::c_char, arg2: *mut __file) -> ::core::ffi::c_int,
    >,
    pub get: ::core::option::Option<unsafe extern "C" fn(arg1: *mut __file) -> ::core::ffi::c_int>,
    pub flush:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut __file) -> ::core::ffi::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __file"][::core::mem::size_of::<__file>() - 20usize];
    ["Alignment of __file"][::core::mem::align_of::<__file>() - 4usize];
    ["Offset of field: __file::unget"][::core::mem::offset_of!(__file, unget) - 0usize];
    ["Offset of field: __file::flags"][::core::mem::offset_of!(__file, flags) - 4usize];
    ["Offset of field: __file::put"][::core::mem::offset_of!(__file, put) - 8usize];
    ["Offset of field: __file::get"][::core::mem::offset_of!(__file, get) - 12usize];
    ["Offset of field: __file::flush"][::core::mem::offset_of!(__file, flush) - 16usize];
};
pub type __FILE = __file;
pub type FILE = __FILE;
unsafe extern "C" {
    pub static stdin: *mut FILE;
}
unsafe extern "C" {
    pub static stdout: *mut FILE;
}
unsafe extern "C" {
    pub static stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fflush(stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn printf(__fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __fmt: *const ::core::ffi::c_char,
        __ap: __builtin_va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __stream: *mut FILE,
        __fmt: *const ::core::ffi::c_char,
        __ap: __builtin_va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::core::ffi::c_char,
        __n: ::core::ffi::c_uint,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ap: __builtin_va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::core::ffi::c_char,
        __n: ::core::ffi::c_uint,
        __fmt: *const ::core::ffi::c_char,
        ap: __builtin_va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn asprintf(
        strp: *mut *mut ::core::ffi::c_char,
        fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn asnprintf(
        str_: *mut ::core::ffi::c_char,
        lenp: *mut size_t,
        fmt: *const ::core::ffi::c_char,
        ...
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn vasprintf(
        strp: *mut *mut ::core::ffi::c_char,
        fmt: *const ::core::ffi::c_char,
        ap: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fputs(__str: *const ::core::ffi::c_char, __stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn puts(__str: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::core::ffi::c_void,
        __size: ::core::ffi::c_uint,
        __nmemb: ::core::ffi::c_uint,
        __stream: *mut FILE,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn scanf(__fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vscanf(__fmt: *const ::core::ffi::c_char, __ap: __builtin_va_list)
    -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __fmt: *const ::core::ffi::c_char,
        __ap: __builtin_va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __buf: *const ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __buf: *const ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ap: __builtin_va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __str: *mut ::core::ffi::c_char,
        __size: ::core::ffi::c_int,
        __stream: *mut FILE,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::core::ffi::c_void,
        __size: ::core::ffi::c_uint,
        __nmemb: ::core::ffi::c_uint,
        __stream: *mut FILE,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
pub type fpos_t = _fpos_t;
unsafe extern "C" {
    pub fn fgetpos(stream: *mut FILE, pos: *mut fpos_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fopen(path: *const ::core::ffi::c_char, mode: *const ::core::ffi::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        path: *const ::core::ffi::c_char,
        mode: *const ::core::ffi::c_char,
        stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(arg1: ::core::ffi::c_int, arg2: *const ::core::ffi::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        buf: *mut ::core::ffi::c_void,
        size: size_t,
        mode: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fseek(
        stream: *mut FILE,
        offset: ::core::ffi::c_long,
        whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fseeko(
        stream: *mut FILE,
        offset: __off_t,
        whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ftell(stream: *mut FILE) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn ftello(stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn remove(pathname: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn rename(
        oldpath: *const ::core::ffi::c_char,
        newpath: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn rewind(stream: *mut FILE);
}
unsafe extern "C" {
    pub fn setbuf(stream: *mut FILE, buf: *mut ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn setbuffer(stream: *mut FILE, buf: *mut ::core::ffi::c_char, size: size_t);
}
unsafe extern "C" {
    pub fn setlinebuf(stream: *mut FILE);
}
unsafe extern "C" {
    pub fn setvbuf(
        stream: *mut FILE,
        buf: *mut ::core::ffi::c_char,
        mode: ::core::ffi::c_int,
        size: size_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getline(
        lineptr: *mut *mut ::core::ffi::c_char,
        n: *mut size_t,
        stream: *mut FILE,
    ) -> _ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        lineptr: *mut *mut ::core::ffi::c_char,
        n: *mut size_t,
        delim: ::core::ffi::c_int,
        stream: *mut FILE,
    ) -> _ssize_t;
}
unsafe extern "C" {
    pub fn funopen(
        cookie: *const ::core::ffi::c_void,
        readfn: ::core::option::Option<
            unsafe extern "C" fn(
                cookie: *mut ::core::ffi::c_void,
                buf: *mut ::core::ffi::c_void,
                n: size_t,
            ) -> _ssize_t,
        >,
        writefn: ::core::option::Option<
            unsafe extern "C" fn(
                cookie: *mut ::core::ffi::c_void,
                buf: *const ::core::ffi::c_void,
                n: size_t,
            ) -> _ssize_t,
        >,
        seekfn: ::core::option::Option<
            unsafe extern "C" fn(
                cookie: *mut ::core::ffi::c_void,
                off: __off_t,
                whence: ::core::ffi::c_int,
            ) -> __off_t,
        >,
        closefn: ::core::option::Option<
            unsafe extern "C" fn(cookie: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
        >,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::core::ffi::c_int,
    pub rem: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::core::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::core::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::core::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::core::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::core::ffi::c_long,
    pub rem: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::core::mem::size_of::<ldiv_t>() - 8usize];
    ["Alignment of ldiv_t"][::core::mem::align_of::<ldiv_t>() - 4usize];
    ["Offset of field: ldiv_t::quot"][::core::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::core::mem::offset_of!(ldiv_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::core::ffi::c_longlong,
    pub rem: ::core::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::core::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::core::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::core::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::core::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn free(arg1: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn _Exit(__status: ::core::ffi::c_int) -> !;
}
unsafe extern "C" {
    pub fn a64l(__input: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn abs(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::core::ffi::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoff(__nptr: *const ::core::ffi::c_char) -> f32;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::core::ffi::c_void,
        __base: *const ::core::ffi::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn calloc(arg1: ::core::ffi::c_uint, arg2: ::core::ffi::c_uint)
    -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn div(__numer: ::core::ffi::c_int, __denom: ::core::ffi::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn exit(__status: ::core::ffi::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__string: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *const *mut ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn labs(arg1: ::core::ffi::c_long) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::core::ffi::c_long, __denom: ::core::ffi::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn llabs(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn lldiv(__numer: ::core::ffi::c_longlong, __denom: ::core::ffi::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn malloc(arg1: ::core::ffi::c_uint) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn mblen(arg1: *const ::core::ffi::c_char, arg2: size_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::core::ffi::c_char, arg3: size_t) -> size_t;
}
unsafe extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::core::ffi::c_char,
        arg3: size_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::core::ffi::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::core::ffi::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
                arg3: *mut ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
        __thunk: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn rand() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn random() -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn realloc(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn reallocarray(
        arg1: *mut ::core::ffi::c_void,
        arg2: size_t,
        arg3: size_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn rpmatch(response: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::core::ffi::c_uint);
}
unsafe extern "C" {
    pub fn srandom(arg1: ::core::ffi::c_uint);
}
unsafe extern "C" {
    pub fn strtod(__n: *const ::core::ffi::c_char, __end_PTR: *mut *mut ::core::ffi::c_char)
    -> f64;
}
unsafe extern "C" {
    pub fn strtof(__n: *const ::core::ffi::c_char, __end_PTR: *mut *mut ::core::ffi::c_char)
    -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __n: *const ::core::ffi::c_char,
        __end_PTR: *mut *mut ::core::ffi::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __n: *const ::core::ffi::c_char,
        __end_PTR: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn strtoll(
        __n: *const ::core::ffi::c_char,
        __end_PTR: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        __n: *const ::core::ffi::c_char,
        __end_PTR: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        __n: *const ::core::ffi::c_char,
        __end_PTR: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtod_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: locale_t,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        arg4: locale_t,
    ) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn strtoul_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        __loc: locale_t,
    ) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn strtoll_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        arg4: locale_t,
    ) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        __loc: locale_t,
    ) -> ::core::ffi::c_ulonglong;
}
unsafe extern "C" {
    pub fn system(__string: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcstombs(arg1: *mut ::core::ffi::c_char, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
unsafe extern "C" {
    pub fn wctomb(arg1: *mut ::core::ffi::c_char, arg2: wchar_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn l64a(__input: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::core::ffi::c_int,
        arg3: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn gcvtf(
        arg1: f32,
        arg2: ::core::ffi::c_int,
        arg3: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn gcvtl(
        arg1: u128,
        arg2: ::core::ffi::c_int,
        arg3: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn itoa(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn utoa(
        arg1: ::core::ffi::c_uint,
        arg2: *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        arg1: *const ::core::ffi::c_void,
        arg2: *mut ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    );
}
unsafe extern "C" {
    pub fn bzero(arg1: *mut ::core::ffi::c_void, arg2: ::core::ffi::c_uint);
}
unsafe extern "C" {
    pub fn explicit_bzero(arg1: *mut ::core::ffi::c_void, arg2: size_t);
}
unsafe extern "C" {
    pub fn ffs(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ffsl(arg1: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ffsll(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fls(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn flsl(arg1: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn flsll(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn index(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcasecmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn memccpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_int,
        arg4: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memchr(
        arg1: *const ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memmem(
        arg1: *const ::core::ffi::c_void,
        arg2: size_t,
        arg3: *const ::core::ffi::c_void,
        arg4: size_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn mempcpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memrchr(
        arg1: *const ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: size_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memset(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn rawmemchr(
        arg1: *const ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn stpcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcasestr(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strchrnul(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcoll_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strdup(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strerror(arg1: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strerror_r(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_char,
        arg3: size_t,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strlcat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strlen(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strlcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strlwr(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strnlen(arg1: *const ::core::ffi::c_char, arg2: size_t) -> size_t;
}
unsafe extern "C" {
    pub fn strnstr(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: size_t,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strstr(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strupr(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strverscmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn timingsafe_bcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: size_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn timingsafe_memcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: size_t,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type __fd_mask = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 8usize];
    ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::__fds_bits"][::core::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
unsafe extern "C" {
    pub fn select(
        __n: ::core::ffi::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn gettimeofday(__p: *mut timeval, __tz: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tms"][::core::mem::size_of::<tms>() - 16usize];
    ["Alignment of tms"][::core::mem::align_of::<tms>() - 4usize];
    ["Offset of field: tms::tms_utime"][::core::mem::offset_of!(tms, tms_utime) - 0usize];
    ["Offset of field: tms::tms_stime"][::core::mem::offset_of!(tms, tms_stime) - 4usize];
    ["Offset of field: tms::tms_cutime"][::core::mem::offset_of!(tms, tms_cutime) - 8usize];
    ["Offset of field: tms::tms_cstime"][::core::mem::offset_of!(tms, tms_cstime) - 12usize];
};
unsafe extern "C" {
    pub fn times(arg1: *mut tms) -> clock_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::core::ffi::c_int,
    pub tm_min: ::core::ffi::c_int,
    pub tm_hour: ::core::ffi::c_int,
    pub tm_mday: ::core::ffi::c_int,
    pub tm_mon: ::core::ffi::c_int,
    pub tm_year: ::core::ffi::c_int,
    pub tm_wday: ::core::ffi::c_int,
    pub tm_yday: ::core::ffi::c_int,
    pub tm_isdst: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::core::mem::size_of::<tm>() - 36usize];
    ["Alignment of tm"][::core::mem::align_of::<tm>() - 4usize];
    ["Offset of field: tm::tm_sec"][::core::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::core::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::core::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::core::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::core::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::core::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::core::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::core::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::core::mem::offset_of!(tm, tm_isdst) - 32usize];
};
unsafe extern "C" {
    pub fn asctime(_tblock: *const tm) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut [::core::ffi::c_char; 26usize],
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn clock_gettime(clock_id: clockid_t, tp: *mut timespec) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ctime(_time: *const time_t) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut [::core::ffi::c_char; 26usize],
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn difftime(_time2: time_t, _time1: time_t) -> f64;
}
unsafe extern "C" {
    pub fn gmtime(_timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(_timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn mktime(_timeptr: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        _s: *mut ::core::ffi::c_char,
        _maxsize: size_t,
        _fmt: *const ::core::ffi::c_char,
        _t: *const tm,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn strftime_l(
        _s: *mut ::core::ffi::c_char,
        _maxsize: size_t,
        _fmt: *const ::core::ffi::c_char,
        _t: *const tm,
        _l: locale_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn strptime(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut tm,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strptime_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut tm,
        arg4: locale_t,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn time(_timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub static mut environ: *mut *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn close(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getentropy(arg1: *mut ::core::ffi::c_void, arg2: size_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getpid() -> pid_t;
}
unsafe extern "C" {
    pub fn isatty(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn link(
        __path1: *const ::core::ffi::c_char,
        __path2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn lseek(
        __fildes: ::core::ffi::c_int,
        __offset: off_t,
        __whence: ::core::ffi::c_int,
    ) -> off_t;
}
unsafe extern "C" {
    pub fn read(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __nbyte: size_t,
    ) -> ssize_t;
}
unsafe extern "C" {
    pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn swab(arg1: *const ::core::ffi::c_void, arg2: *mut ::core::ffi::c_void, arg3: ssize_t);
}
unsafe extern "C" {
    pub fn unlink(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn usleep(__useconds: useconds_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn write(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __nbyte: size_t,
    ) -> ssize_t;
}
pub type wctype_t = ::core::ffi::c_int;
pub type mbstate_t = _mbstate_t;
unsafe extern "C" {
    pub fn btowc(arg1: ::core::ffi::c_int) -> wint_t;
}
unsafe extern "C" {
    pub fn fwide(arg1: *mut __FILE, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mbrlen(arg1: *const ::core::ffi::c_char, arg2: size_t, arg3: *mut mbstate_t) -> size_t;
}
unsafe extern "C" {
    pub fn mbrtowc(
        arg1: *mut wchar_t,
        arg2: *const ::core::ffi::c_char,
        arg3: size_t,
        arg4: *mut mbstate_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::core::ffi::c_char,
        arg3: size_t,
        arg4: size_t,
        arg5: *mut mbstate_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::core::ffi::c_char,
        arg3: size_t,
        arg4: *mut mbstate_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcrtomb(arg1: *mut ::core::ffi::c_char, arg2: wchar_t, arg3: *mut mbstate_t) -> size_t;
}
unsafe extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcscasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcschr(
        arg1: *const ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcscmp(
        arg1: *const ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcscoll_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
}
unsafe extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsftime(
        arg1: *mut wchar_t,
        arg2: size_t,
        arg3: *const wchar_t,
        arg4: *const tm,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn wcsftime_l(
        arg1: *mut wchar_t,
        arg2: size_t,
        arg3: *const wchar_t,
        arg4: *const tm,
        arg5: locale_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
unsafe extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
unsafe extern "C" {
    pub fn wcslen(arg1: *const ::core::ffi::c_int) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn wcsncasecmp(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: size_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcsncasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: size_t,
        arg4: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsncmp(
        arg1: *const ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: size_t) -> size_t;
}
unsafe extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::core::ffi::c_char,
        arg2: *mut *const wchar_t,
        arg3: size_t,
        arg4: size_t,
        arg5: *mut mbstate_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::core::ffi::c_char,
        arg2: *mut *const wchar_t,
        arg3: size_t,
        arg4: *mut mbstate_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
}
unsafe extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstod_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
unsafe extern "C" {
    pub fn wcstof_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f32;
}
unsafe extern "C" {
    pub fn wcstok(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcstol(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn wcstol_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
        arg4: locale_t,
    ) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
unsafe extern "C" {
    pub fn wcstold_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> u128;
}
unsafe extern "C" {
    pub fn wcstoll(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoll_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
        arg4: locale_t,
    ) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoul(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoul_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
        arg4: locale_t,
    ) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoull(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstoull_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
        arg4: locale_t,
    ) -> ::core::ffi::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: size_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
unsafe extern "C" {
    pub fn wcsxfrm_l(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: size_t,
        arg4: locale_t,
    ) -> size_t;
}
unsafe extern "C" {
    pub fn wctob(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wmemchr(
        arg1: *const ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wmemcmp(
        arg1: *const ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wmemcpy(
        arg1: *mut ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wmemmove(
        arg1: *mut ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wmempcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: size_t) -> *mut wchar_t;
}
pub type wctrans_t = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn iswalnum(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswalpha(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswblank(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswcntrl(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswctype(arg1: wint_t, arg2: wctype_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswdigit(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswgraph(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswlower(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswprint(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswpunct(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswspace(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswupper(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswxdigit(arg1: wint_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn towupper(arg1: wint_t) -> wint_t;
}
unsafe extern "C" {
    pub fn towlower(arg1: wint_t) -> wint_t;
}
unsafe extern "C" {
    pub fn wctrans(arg1: *const ::core::ffi::c_char) -> wctrans_t;
}
unsafe extern "C" {
    pub fn wctype(arg1: *const ::core::ffi::c_char) -> wctype_t;
}
unsafe extern "C" {
    pub fn iswalnum_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswalpha_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswblank_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswcntrl_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswctype_l(arg1: wint_t, arg2: wctype_t, arg3: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswdigit_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswgraph_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswlower_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswprint_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswpunct_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswspace_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswupper_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iswxdigit_l(arg1: wint_t, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn towupper_l(arg1: wint_t, arg2: locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn towlower_l(arg1: wint_t, arg2: locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn wctrans_l(arg1: *const ::core::ffi::c_char, arg2: locale_t) -> wctrans_t;
}
unsafe extern "C" {
    pub fn wctype_l(arg1: *const ::core::ffi::c_char, arg2: locale_t) -> wctype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct path_t {
    pub buffer: *mut ::core::ffi::c_char,
    pub device: *mut ::core::ffi::c_char,
    pub directory: *mut ::core::ffi::c_char,
    pub filename: *mut ::core::ffi::c_char,
    pub unixpath: *mut ::core::ffi::c_char,
    pub len: size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of path_t"][::core::mem::size_of::<path_t>() - 24usize];
    ["Alignment of path_t"][::core::mem::align_of::<path_t>() - 4usize];
    ["Offset of field: path_t::buffer"][::core::mem::offset_of!(path_t, buffer) - 0usize];
    ["Offset of field: path_t::device"][::core::mem::offset_of!(path_t, device) - 4usize];
    ["Offset of field: path_t::directory"][::core::mem::offset_of!(path_t, directory) - 8usize];
    ["Offset of field: path_t::filename"][::core::mem::offset_of!(path_t, filename) - 12usize];
    ["Offset of field: path_t::unixpath"][::core::mem::offset_of!(path_t, unixpath) - 16usize];
    ["Offset of field: path_t::len"][::core::mem::offset_of!(path_t, len) - 20usize];
};
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum path_parse_result_t {
    PATH_PARSE_OK = 0,
    PATH_PARSE_EMPTY_DEVICE = -1,
    PATH_PARSE_NO_DEVICE = -2,
    PATH_PARSE_UNCLOSED_DIRECTORY = -3,
    PATH_PARSE_INVALID_DEVICE_CHAR = -4,
    PATH_PARSE_INVALID_DIR_CHAR = -5,
    PATH_PARSE_INVALID_FILE_CHAR = -6,
    PATH_PARSE_EMPTY_PATH = -7,
}
unsafe extern "C" {
    pub fn parse_path(path: *const ::core::ffi::c_char, result: *mut path_t)
    -> path_parse_result_t;
}
unsafe extern "C" {
    pub fn path_free(path: *mut path_t);
}
unsafe extern "C" {
    pub fn mkdir_p(path: *const ::core::ffi::c_char) -> bool;
}
unsafe extern "C" {
    pub fn rm_rf(path: *const ::core::ffi::c_char) -> bool;
}
unsafe extern "C" {
    pub fn path_dirname(path: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn path_basename(path: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn path_devname(path: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn path_dirconcat(
        path: *const ::core::ffi::c_char,
        subdir: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn path_fileconcat(
        path: *const ::core::ffi::c_char,
        filename: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn path_concat(
        base_path: *const ::core::ffi::c_char,
        append_path: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum application_source_t {
    APPLICATION_SOURCE_UNKNOWN = 0,
    APPLICATION_SOURCE_BADGEHUB = 1,
    APPLICATION_SOURCE_MAX = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct application_t {
    pub unique_identifier: *const ::core::ffi::c_char,
    pub name: *const ::core::ffi::c_char,
    pub author: *const ::core::ffi::c_char,
    pub version: *const ::core::ffi::c_char,
    pub interpreter: *const ::core::ffi::c_char,
    pub metadata_file: *const ::core::ffi::c_char,
    pub installed_path: *const ::core::ffi::c_char,
    pub binary_path: *const ::core::ffi::c_char,
    pub source: application_source_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of application_t"][::core::mem::size_of::<application_t>() - 36usize];
    ["Alignment of application_t"][::core::mem::align_of::<application_t>() - 4usize];
    ["Offset of field: application_t::unique_identifier"]
        [::core::mem::offset_of!(application_t, unique_identifier) - 0usize];
    ["Offset of field: application_t::name"][::core::mem::offset_of!(application_t, name) - 4usize];
    ["Offset of field: application_t::author"]
        [::core::mem::offset_of!(application_t, author) - 8usize];
    ["Offset of field: application_t::version"]
        [::core::mem::offset_of!(application_t, version) - 12usize];
    ["Offset of field: application_t::interpreter"]
        [::core::mem::offset_of!(application_t, interpreter) - 16usize];
    ["Offset of field: application_t::metadata_file"]
        [::core::mem::offset_of!(application_t, metadata_file) - 20usize];
    ["Offset of field: application_t::installed_path"]
        [::core::mem::offset_of!(application_t, installed_path) - 24usize];
    ["Offset of field: application_t::binary_path"]
        [::core::mem::offset_of!(application_t, binary_path) - 28usize];
    ["Offset of field: application_t::source"]
        [::core::mem::offset_of!(application_t, source) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct application_list {
    _unused: [u8; 0],
}
pub type application_list_handle = *mut application_list;
unsafe extern "C" {
    pub fn application_launch(unique_identifier: *const ::core::ffi::c_char) -> pid_t;
}
unsafe extern "C" {
    pub fn application_create(
        unique_identifier: *const ::core::ffi::c_char,
        name: *const ::core::ffi::c_char,
        author: *const ::core::ffi::c_char,
        version: *const ::core::ffi::c_char,
        interpreter: *const ::core::ffi::c_char,
        source: application_source_t,
    ) -> *mut application_t;
}
unsafe extern "C" {
    pub fn application_set_metadata(
        application: *mut application_t,
        metadata_file: *const ::core::ffi::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn application_set_binary_path(
        application: *mut application_t,
        binary_path: *const ::core::ffi::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn application_set_version(
        application: *mut application_t,
        version: *const ::core::ffi::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn application_set_author(
        application: *mut application_t,
        author: *const ::core::ffi::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn application_set_name(
        application: *mut application_t,
        name: *const ::core::ffi::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn application_set_interpreter(
        application: *mut application_t,
        interpreter: *const ::core::ffi::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn application_destroy(application: *mut application_t) -> bool;
}
unsafe extern "C" {
    pub fn application_create_file(
        application: *mut application_t,
        file_path: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn application_create_file_string(
        application: *mut application_t,
        file_path: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn application_list(out: *mut *mut application_t) -> application_list_handle;
}
unsafe extern "C" {
    pub fn application_list_get_next(list: application_list_handle) -> *mut application_t;
}
unsafe extern "C" {
    pub fn application_list_close(list: application_list_handle);
}
unsafe extern "C" {
    pub fn application_get(unique_identifier: *const ::core::ffi::c_char) -> *mut application_t;
}
unsafe extern "C" {
    pub fn application_free(application: *mut application_t);
}
pub type key_code_t = u32;
pub type key_mod_t = u16;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum keyboard_scancode_t {
    KEY_SCANCODE_UNKNOWN = 0,
    KEY_SCANCODE_A = 4,
    KEY_SCANCODE_B = 5,
    KEY_SCANCODE_C = 6,
    KEY_SCANCODE_D = 7,
    KEY_SCANCODE_E = 8,
    KEY_SCANCODE_F = 9,
    KEY_SCANCODE_G = 10,
    KEY_SCANCODE_H = 11,
    KEY_SCANCODE_I = 12,
    KEY_SCANCODE_J = 13,
    KEY_SCANCODE_K = 14,
    KEY_SCANCODE_L = 15,
    KEY_SCANCODE_M = 16,
    KEY_SCANCODE_N = 17,
    KEY_SCANCODE_O = 18,
    KEY_SCANCODE_P = 19,
    KEY_SCANCODE_Q = 20,
    KEY_SCANCODE_R = 21,
    KEY_SCANCODE_S = 22,
    KEY_SCANCODE_T = 23,
    KEY_SCANCODE_U = 24,
    KEY_SCANCODE_V = 25,
    KEY_SCANCODE_W = 26,
    KEY_SCANCODE_X = 27,
    KEY_SCANCODE_Y = 28,
    KEY_SCANCODE_Z = 29,
    KEY_SCANCODE_1 = 30,
    KEY_SCANCODE_2 = 31,
    KEY_SCANCODE_3 = 32,
    KEY_SCANCODE_4 = 33,
    KEY_SCANCODE_5 = 34,
    KEY_SCANCODE_6 = 35,
    KEY_SCANCODE_7 = 36,
    KEY_SCANCODE_8 = 37,
    KEY_SCANCODE_9 = 38,
    KEY_SCANCODE_0 = 39,
    KEY_SCANCODE_RETURN = 40,
    KEY_SCANCODE_ESCAPE = 41,
    KEY_SCANCODE_BACKSPACE = 42,
    KEY_SCANCODE_TAB = 43,
    KEY_SCANCODE_SPACE = 44,
    KEY_SCANCODE_MINUS = 45,
    KEY_SCANCODE_EQUALS = 46,
    KEY_SCANCODE_LEFTBRACKET = 47,
    KEY_SCANCODE_RIGHTBRACKET = 48,
    #[doc = "< Located at the lower left of the return\n   key on ISO keyboards and at the right end\n   of the QWERTY row on ANSI keyboards.\n   Produces REVERSE SOLIDUS (backslash) and\n   VERTICAL LINE in a US layout, REVERSE\n   SOLIDUS and VERTICAL LINE in a UK Mac\n   layout, NUMBER SIGN and TILDE in a UK\n   Windows layout, DOLLAR SIGN and POUND SIGN\n   in a Swiss German layout, NUMBER SIGN and\n   APOSTROPHE in a German layout, GRAVE\n   ACCENT and POUND SIGN in a French Mac\n   layout, and ASTERISK and MICRO SIGN in a\n   French Windows layout."]
    KEY_SCANCODE_BACKSLASH = 49,
    #[doc = "< ISO USB keyboards actually use this code\n   instead of 49 for the same key, but all\n   OSes I've seen treat the two codes\n   identically. So, as an implementor, unless\n   your keyboard generates both of those\n   codes and your OS treats them differently,\n   you should generate KEY_SCANCODE_BACKSLASH\n   instead of this code. As a user, you\n   should not rely on this code because SDL\n   will never generate it with most (all?)\n   keyboards."]
    KEY_SCANCODE_NONUSHASH = 50,
    KEY_SCANCODE_SEMICOLON = 51,
    KEY_SCANCODE_APOSTROPHE = 52,
    #[doc = "< Located in the top left corner (on both ANSI\n   and ISO keyboards). Produces GRAVE ACCENT and\n   TILDE in a US Windows layout and in US and UK\n   Mac layouts on ANSI keyboards, GRAVE ACCENT\n   and NOT SIGN in a UK Windows layout, SECTION\n   SIGN and PLUS-MINUS SIGN in US and UK Mac\n   layouts on ISO keyboards, SECTION SIGN and\n   DEGREE SIGN in a Swiss German layout (Mac:\n   only on ISO keyboards), CIRCUMFLEX ACCENT and\n   DEGREE SIGN in a German layout (Mac: only on\n   ISO keyboards), SUPERSCRIPT TWO and TILDE in a\n   French Windows layout, COMMERCIAL AT and\n   NUMBER SIGN in a French Mac layout on ISO\n   keyboards, and LESS-THAN SIGN and GREATER-THAN\n   SIGN in a Swiss German, German, or French Mac\n   layout on ANSI keyboards."]
    KEY_SCANCODE_GRAVE = 53,
    KEY_SCANCODE_COMMA = 54,
    KEY_SCANCODE_PERIOD = 55,
    KEY_SCANCODE_SLASH = 56,
    KEY_SCANCODE_CAPSLOCK = 57,
    KEY_SCANCODE_F1 = 58,
    KEY_SCANCODE_F2 = 59,
    KEY_SCANCODE_F3 = 60,
    KEY_SCANCODE_F4 = 61,
    KEY_SCANCODE_F5 = 62,
    KEY_SCANCODE_F6 = 63,
    KEY_SCANCODE_F7 = 64,
    KEY_SCANCODE_F8 = 65,
    KEY_SCANCODE_F9 = 66,
    KEY_SCANCODE_F10 = 67,
    KEY_SCANCODE_F11 = 68,
    KEY_SCANCODE_F12 = 69,
    KEY_SCANCODE_PRINTSCREEN = 70,
    KEY_SCANCODE_SCROLLLOCK = 71,
    KEY_SCANCODE_PAUSE = 72,
    #[doc = "< insert on PC, help on some Mac keyboards (but\ndoes send code 73, not 117)"]
    KEY_SCANCODE_INSERT = 73,
    KEY_SCANCODE_HOME = 74,
    KEY_SCANCODE_PAGEUP = 75,
    KEY_SCANCODE_DELETE = 76,
    KEY_SCANCODE_END = 77,
    KEY_SCANCODE_PAGEDOWN = 78,
    KEY_SCANCODE_RIGHT = 79,
    KEY_SCANCODE_LEFT = 80,
    KEY_SCANCODE_DOWN = 81,
    KEY_SCANCODE_UP = 82,
    #[doc = "< num lock on PC, clear on Mac keyboards"]
    KEY_SCANCODE_NUMLOCKCLEAR = 83,
    KEY_SCANCODE_KP_DIVIDE = 84,
    KEY_SCANCODE_KP_MULTIPLY = 85,
    KEY_SCANCODE_KP_MINUS = 86,
    KEY_SCANCODE_KP_PLUS = 87,
    KEY_SCANCODE_KP_ENTER = 88,
    KEY_SCANCODE_KP_1 = 89,
    KEY_SCANCODE_KP_2 = 90,
    KEY_SCANCODE_KP_3 = 91,
    KEY_SCANCODE_KP_4 = 92,
    KEY_SCANCODE_KP_5 = 93,
    KEY_SCANCODE_KP_6 = 94,
    KEY_SCANCODE_KP_7 = 95,
    KEY_SCANCODE_KP_8 = 96,
    KEY_SCANCODE_KP_9 = 97,
    KEY_SCANCODE_KP_0 = 98,
    KEY_SCANCODE_KP_PERIOD = 99,
    #[doc = "< This is the additional key that ISO\n   keyboards have over ANSI ones,\n   located between left shift and Y.\n   Produces GRAVE ACCENT and TILDE in a\n   US or UK Mac layout, REVERSE SOLIDUS\n   (backslash) and VERTICAL LINE in a\n   US or UK Windows layout, and\n   LESS-THAN SIGN and GREATER-THAN SIGN\n   in a Swiss German, German, or French\n   layout."]
    KEY_SCANCODE_NONUSBACKSLASH = 100,
    #[doc = "< windows contextual menu, compose"]
    KEY_SCANCODE_APPLICATION = 101,
    #[doc = "< The USB document says this is a status flag,\n   not a physical key - but some Mac keyboards\n   do have a power key."]
    KEY_SCANCODE_POWER = 102,
    KEY_SCANCODE_KP_EQUALS = 103,
    KEY_SCANCODE_F13 = 104,
    KEY_SCANCODE_F14 = 105,
    KEY_SCANCODE_F15 = 106,
    KEY_SCANCODE_F16 = 107,
    KEY_SCANCODE_F17 = 108,
    KEY_SCANCODE_F18 = 109,
    KEY_SCANCODE_F19 = 110,
    KEY_SCANCODE_F20 = 111,
    KEY_SCANCODE_F21 = 112,
    KEY_SCANCODE_F22 = 113,
    KEY_SCANCODE_F23 = 114,
    KEY_SCANCODE_F24 = 115,
    KEY_SCANCODE_EXECUTE = 116,
    #[doc = "< AL Integrated Help Center"]
    KEY_SCANCODE_HELP = 117,
    #[doc = "< Menu (show menu)"]
    KEY_SCANCODE_MENU = 118,
    KEY_SCANCODE_SELECT = 119,
    #[doc = "< AC Stop"]
    KEY_SCANCODE_STOP = 120,
    #[doc = "< AC Redo/Repeat"]
    KEY_SCANCODE_AGAIN = 121,
    #[doc = "< AC Undo"]
    KEY_SCANCODE_UNDO = 122,
    #[doc = "< AC Cut"]
    KEY_SCANCODE_CUT = 123,
    #[doc = "< AC Copy"]
    KEY_SCANCODE_COPY = 124,
    #[doc = "< AC Paste"]
    KEY_SCANCODE_PASTE = 125,
    #[doc = "< AC Find"]
    KEY_SCANCODE_FIND = 126,
    KEY_SCANCODE_MUTE = 127,
    KEY_SCANCODE_VOLUMEUP = 128,
    KEY_SCANCODE_VOLUMEDOWN = 129,
    KEY_SCANCODE_KP_COMMA = 133,
    KEY_SCANCODE_KP_EQUALSAS400 = 134,
    #[doc = "< used on Asian keyboards, see\nfootnotes in USB doc"]
    KEY_SCANCODE_INTERNATIONAL1 = 135,
    KEY_SCANCODE_INTERNATIONAL2 = 136,
    #[doc = "< Yen"]
    KEY_SCANCODE_INTERNATIONAL3 = 137,
    KEY_SCANCODE_INTERNATIONAL4 = 138,
    KEY_SCANCODE_INTERNATIONAL5 = 139,
    KEY_SCANCODE_INTERNATIONAL6 = 140,
    KEY_SCANCODE_INTERNATIONAL7 = 141,
    KEY_SCANCODE_INTERNATIONAL8 = 142,
    KEY_SCANCODE_INTERNATIONAL9 = 143,
    #[doc = "< Hangul/English toggle"]
    KEY_SCANCODE_LANG1 = 144,
    #[doc = "< Hanja conversion"]
    KEY_SCANCODE_LANG2 = 145,
    #[doc = "< Katakana"]
    KEY_SCANCODE_LANG3 = 146,
    #[doc = "< Hiragana"]
    KEY_SCANCODE_LANG4 = 147,
    #[doc = "< Zenkaku/Hankaku"]
    KEY_SCANCODE_LANG5 = 148,
    #[doc = "< reserved"]
    KEY_SCANCODE_LANG6 = 149,
    #[doc = "< reserved"]
    KEY_SCANCODE_LANG7 = 150,
    #[doc = "< reserved"]
    KEY_SCANCODE_LANG8 = 151,
    #[doc = "< reserved"]
    KEY_SCANCODE_LANG9 = 152,
    #[doc = "< Erase-Eaze"]
    KEY_SCANCODE_ALTERASE = 153,
    KEY_SCANCODE_SYSREQ = 154,
    #[doc = "< AC Cancel"]
    KEY_SCANCODE_CANCEL = 155,
    KEY_SCANCODE_CLEAR = 156,
    KEY_SCANCODE_PRIOR = 157,
    KEY_SCANCODE_RETURN2 = 158,
    KEY_SCANCODE_SEPARATOR = 159,
    KEY_SCANCODE_OUT = 160,
    KEY_SCANCODE_OPER = 161,
    KEY_SCANCODE_CLEARAGAIN = 162,
    KEY_SCANCODE_CRSEL = 163,
    KEY_SCANCODE_EXSEL = 164,
    KEY_SCANCODE_KP_00 = 176,
    KEY_SCANCODE_KP_000 = 177,
    KEY_SCANCODE_THOUSANDSSEPARATOR = 178,
    KEY_SCANCODE_DECIMALSEPARATOR = 179,
    KEY_SCANCODE_CURRENCYUNIT = 180,
    KEY_SCANCODE_CURRENCYSUBUNIT = 181,
    KEY_SCANCODE_KP_LEFTPAREN = 182,
    KEY_SCANCODE_KP_RIGHTPAREN = 183,
    KEY_SCANCODE_KP_LEFTBRACE = 184,
    KEY_SCANCODE_KP_RIGHTBRACE = 185,
    KEY_SCANCODE_KP_TAB = 186,
    KEY_SCANCODE_KP_BACKSPACE = 187,
    KEY_SCANCODE_KP_A = 188,
    KEY_SCANCODE_KP_B = 189,
    KEY_SCANCODE_KP_C = 190,
    KEY_SCANCODE_KP_D = 191,
    KEY_SCANCODE_KP_E = 192,
    KEY_SCANCODE_KP_F = 193,
    KEY_SCANCODE_KP_XOR = 194,
    KEY_SCANCODE_KP_POWER = 195,
    KEY_SCANCODE_KP_PERCENT = 196,
    KEY_SCANCODE_KP_LESS = 197,
    KEY_SCANCODE_KP_GREATER = 198,
    KEY_SCANCODE_KP_AMPERSAND = 199,
    KEY_SCANCODE_KP_DBLAMPERSAND = 200,
    KEY_SCANCODE_KP_VERTICALBAR = 201,
    KEY_SCANCODE_KP_DBLVERTICALBAR = 202,
    KEY_SCANCODE_KP_COLON = 203,
    KEY_SCANCODE_KP_HASH = 204,
    KEY_SCANCODE_KP_SPACE = 205,
    KEY_SCANCODE_KP_AT = 206,
    KEY_SCANCODE_KP_EXCLAM = 207,
    KEY_SCANCODE_KP_MEMSTORE = 208,
    KEY_SCANCODE_KP_MEMRECALL = 209,
    KEY_SCANCODE_KP_MEMCLEAR = 210,
    KEY_SCANCODE_KP_MEMADD = 211,
    KEY_SCANCODE_KP_MEMSUBTRACT = 212,
    KEY_SCANCODE_KP_MEMMULTIPLY = 213,
    KEY_SCANCODE_KP_MEMDIVIDE = 214,
    KEY_SCANCODE_KP_PLUSMINUS = 215,
    KEY_SCANCODE_KP_CLEAR = 216,
    KEY_SCANCODE_KP_CLEARENTRY = 217,
    KEY_SCANCODE_KP_BINARY = 218,
    KEY_SCANCODE_KP_OCTAL = 219,
    KEY_SCANCODE_KP_DECIMAL = 220,
    KEY_SCANCODE_KP_HEXADECIMAL = 221,
    KEY_SCANCODE_LCTRL = 224,
    KEY_SCANCODE_LSHIFT = 225,
    #[doc = "< alt, option"]
    KEY_SCANCODE_LALT = 226,
    #[doc = "< windows, command (apple), meta"]
    KEY_SCANCODE_LGUI = 227,
    KEY_SCANCODE_RCTRL = 228,
    KEY_SCANCODE_RSHIFT = 229,
    #[doc = "< alt gr, option"]
    KEY_SCANCODE_RALT = 230,
    #[doc = "< windows, command (apple), meta"]
    KEY_SCANCODE_RGUI = 231,
    #[doc = "< I'm not sure if this is really not covered\n   by any of the above, but since there's a\n   special KMOD_MODE for it I'm adding it here"]
    KEY_SCANCODE_MODE = 257,
    #[doc = "< Sleep"]
    KEY_SCANCODE_SLEEP = 258,
    #[doc = "< Wake"]
    KEY_SCANCODE_WAKE = 259,
    #[doc = "< Channel Increment"]
    KEY_SCANCODE_CHANNEL_INCREMENT = 260,
    #[doc = "< Channel Decrement"]
    KEY_SCANCODE_CHANNEL_DECREMENT = 261,
    #[doc = "< Play"]
    KEY_SCANCODE_MEDIA_PLAY = 262,
    #[doc = "< Pause"]
    KEY_SCANCODE_MEDIA_PAUSE = 263,
    #[doc = "< Record"]
    KEY_SCANCODE_MEDIA_RECORD = 264,
    #[doc = "< Fast Forward"]
    KEY_SCANCODE_MEDIA_FAST_FORWARD = 265,
    #[doc = "< Rewind"]
    KEY_SCANCODE_MEDIA_REWIND = 266,
    #[doc = "< Next Track"]
    KEY_SCANCODE_MEDIA_NEXT_TRACK = 267,
    #[doc = "< Previous Track"]
    KEY_SCANCODE_MEDIA_PREVIOUS_TRACK = 268,
    #[doc = "< Stop"]
    KEY_SCANCODE_MEDIA_STOP = 269,
    #[doc = "< Eject"]
    KEY_SCANCODE_MEDIA_EJECT = 270,
    #[doc = "< Play / Pause"]
    KEY_SCANCODE_MEDIA_PLAY_PAUSE = 271,
    KEY_SCANCODE_MEDIA_SELECT = 272,
    #[doc = "< AC New"]
    KEY_SCANCODE_AC_NEW = 273,
    #[doc = "< AC Open"]
    KEY_SCANCODE_AC_OPEN = 274,
    #[doc = "< AC Close"]
    KEY_SCANCODE_AC_CLOSE = 275,
    #[doc = "< AC Exit"]
    KEY_SCANCODE_AC_EXIT = 276,
    #[doc = "< AC Save"]
    KEY_SCANCODE_AC_SAVE = 277,
    #[doc = "< AC Print"]
    KEY_SCANCODE_AC_PRINT = 278,
    #[doc = "< AC Properties"]
    KEY_SCANCODE_AC_PROPERTIES = 279,
    #[doc = "< AC Search"]
    KEY_SCANCODE_AC_SEARCH = 280,
    #[doc = "< AC Home"]
    KEY_SCANCODE_AC_HOME = 281,
    #[doc = "< AC Back"]
    KEY_SCANCODE_AC_BACK = 282,
    #[doc = "< AC Forward"]
    KEY_SCANCODE_AC_FORWARD = 283,
    #[doc = "< AC Stop"]
    KEY_SCANCODE_AC_STOP = 284,
    #[doc = "< AC Refresh"]
    KEY_SCANCODE_AC_REFRESH = 285,
    #[doc = "< AC Bookmarks"]
    KEY_SCANCODE_AC_BOOKMARKS = 286,
    #[doc = "< Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom left\nof the display."]
    KEY_SCANCODE_SOFTLEFT = 287,
    #[doc = "< Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom right\nof the display."]
    KEY_SCANCODE_SOFTRIGHT = 288,
    #[doc = "< Used for accepting phone calls."]
    KEY_SCANCODE_CALL = 289,
    #[doc = "< Used for rejecting phone calls."]
    KEY_SCANCODE_ENDCALL = 290,
    KEY_SCANCODE_FN = 291,
    KEY_SCANCODE_SQUARE = 292,
    KEY_SCANCODE_TRIANGLE = 293,
    KEY_SCANCODE_CROSS = 294,
    KEY_SCANCODE_CIRCLE = 295,
    KEY_SCANCODE_CLOUD = 296,
    KEY_SCANCODE_DIAMOND = 297,
    #[doc = "< 400-500 reserved for dynamic keycodes"]
    KEY_SCANCODE_RESERVED = 400,
    #[doc = "< not a key, just marks the number of scancodes for array bounds"]
    KEY_SCANCODE_COUNT = 512,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum event_type {
    EVENT_NONE = 0,
    EVENT_QUIT = 1,
    EVENT_KEY_DOWN = 2,
    EVENT_KEY_UP = 3,
    EVENT_WINDOW_RESIZE = 4,
}
pub use self::event_type as event_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct keyboard_event_t {
    #[doc = "< In nanoseconds, populated using gettimeofday"]
    pub timestamp: u64,
    #[doc = "< SDL physical key code"]
    pub scancode: keyboard_scancode_t,
    #[doc = "< SDL virtual key code"]
    pub key: key_code_t,
    #[doc = "< current key modifiers"]
    pub mod_: key_mod_t,
    #[doc = "< resolved key including mods"]
    pub text: ::core::ffi::c_char,
    #[doc = "< true if the key is pressed"]
    pub down: bool,
    #[doc = "< true if this is a key repeat"]
    pub repeat: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of keyboard_event_t"][::core::mem::size_of::<keyboard_event_t>() - 24usize];
    ["Alignment of keyboard_event_t"][::core::mem::align_of::<keyboard_event_t>() - 8usize];
    ["Offset of field: keyboard_event_t::timestamp"]
        [::core::mem::offset_of!(keyboard_event_t, timestamp) - 0usize];
    ["Offset of field: keyboard_event_t::scancode"]
        [::core::mem::offset_of!(keyboard_event_t, scancode) - 8usize];
    ["Offset of field: keyboard_event_t::key"]
        [::core::mem::offset_of!(keyboard_event_t, key) - 12usize];
    ["Offset of field: keyboard_event_t::mod_"]
        [::core::mem::offset_of!(keyboard_event_t, mod_) - 16usize];
    ["Offset of field: keyboard_event_t::text"]
        [::core::mem::offset_of!(keyboard_event_t, text) - 18usize];
    ["Offset of field: keyboard_event_t::down"]
        [::core::mem::offset_of!(keyboard_event_t, down) - 19usize];
    ["Offset of field: keyboard_event_t::repeat"]
        [::core::mem::offset_of!(keyboard_event_t, repeat) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct event_t {
    pub type_: event_type_t,
    pub __bindgen_anon_1: event_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union event_t__bindgen_ty_1 {
    pub keyboard: keyboard_event_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of event_t__bindgen_ty_1"][::core::mem::size_of::<event_t__bindgen_ty_1>() - 24usize];
    ["Alignment of event_t__bindgen_ty_1"]
        [::core::mem::align_of::<event_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: event_t__bindgen_ty_1::keyboard"]
        [::core::mem::offset_of!(event_t__bindgen_ty_1, keyboard) - 0usize];
};
impl ::core::fmt::Debug for event_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "event_t__bindgen_ty_1 {{ union }}")
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of event_t"][::core::mem::size_of::<event_t>() - 32usize];
    ["Alignment of event_t"][::core::mem::align_of::<event_t>() - 8usize];
    ["Offset of field: event_t::type_"][::core::mem::offset_of!(event_t, type_) - 0usize];
};
impl ::core::fmt::Debug for event_t {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "event_t {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pixel_format_t {
    BADGEVMS_PIXELFORMAT_UNKNOWN = 0,
    BADGEVMS_PIXELFORMAT_INDEX1LSB = 286261504,
    BADGEVMS_PIXELFORMAT_INDEX1MSB = 287310080,
    BADGEVMS_PIXELFORMAT_INDEX2LSB = 470811136,
    BADGEVMS_PIXELFORMAT_INDEX2MSB = 471859712,
    BADGEVMS_PIXELFORMAT_INDEX4LSB = 303039488,
    BADGEVMS_PIXELFORMAT_INDEX4MSB = 304088064,
    BADGEVMS_PIXELFORMAT_INDEX8 = 318769153,
    BADGEVMS_PIXELFORMAT_RGB332 = 336660481,
    BADGEVMS_PIXELFORMAT_XRGB4444 = 353504258,
    BADGEVMS_PIXELFORMAT_XBGR4444 = 357698562,
    BADGEVMS_PIXELFORMAT_XRGB1555 = 353570562,
    BADGEVMS_PIXELFORMAT_XBGR1555 = 357764866,
    BADGEVMS_PIXELFORMAT_ARGB4444 = 355602434,
    BADGEVMS_PIXELFORMAT_RGBA4444 = 356651010,
    BADGEVMS_PIXELFORMAT_ABGR4444 = 359796738,
    BADGEVMS_PIXELFORMAT_BGRA4444 = 360845314,
    BADGEVMS_PIXELFORMAT_ARGB1555 = 355667970,
    BADGEVMS_PIXELFORMAT_RGBA5551 = 356782082,
    BADGEVMS_PIXELFORMAT_ABGR1555 = 359862274,
    BADGEVMS_PIXELFORMAT_BGRA5551 = 360976386,
    BADGEVMS_PIXELFORMAT_RGB565 = 353701890,
    BADGEVMS_PIXELFORMAT_BGR565 = 357896194,
    BADGEVMS_PIXELFORMAT_RGB24 = 386930691,
    BADGEVMS_PIXELFORMAT_BGR24 = 390076419,
    BADGEVMS_PIXELFORMAT_XRGB8888 = 370546692,
    BADGEVMS_PIXELFORMAT_RGBX8888 = 371595268,
    BADGEVMS_PIXELFORMAT_XBGR8888 = 374740996,
    BADGEVMS_PIXELFORMAT_BGRX8888 = 375789572,
    BADGEVMS_PIXELFORMAT_ARGB8888 = 372645892,
    BADGEVMS_PIXELFORMAT_RGBA8888 = 373694468,
    BADGEVMS_PIXELFORMAT_ABGR8888 = 376840196,
    BADGEVMS_PIXELFORMAT_BGRA8888 = 377888772,
    BADGEVMS_PIXELFORMAT_XRGB2101010 = 370614276,
    BADGEVMS_PIXELFORMAT_XBGR2101010 = 374808580,
    BADGEVMS_PIXELFORMAT_ARGB2101010 = 372711428,
    BADGEVMS_PIXELFORMAT_ABGR2101010 = 376905732,
    BADGEVMS_PIXELFORMAT_RGB48 = 403714054,
    BADGEVMS_PIXELFORMAT_BGR48 = 406859782,
    BADGEVMS_PIXELFORMAT_RGBA64 = 404766728,
    BADGEVMS_PIXELFORMAT_ARGB64 = 405815304,
    BADGEVMS_PIXELFORMAT_BGRA64 = 407912456,
    BADGEVMS_PIXELFORMAT_ABGR64 = 408961032,
    BADGEVMS_PIXELFORMAT_RGB48_FLOAT = 437268486,
    BADGEVMS_PIXELFORMAT_BGR48_FLOAT = 440414214,
    BADGEVMS_PIXELFORMAT_RGBA64_FLOAT = 438321160,
    BADGEVMS_PIXELFORMAT_ARGB64_FLOAT = 439369736,
    BADGEVMS_PIXELFORMAT_BGRA64_FLOAT = 441466888,
    BADGEVMS_PIXELFORMAT_ABGR64_FLOAT = 442515464,
    BADGEVMS_PIXELFORMAT_RGB96_FLOAT = 454057996,
    BADGEVMS_PIXELFORMAT_BGR96_FLOAT = 457203724,
    BADGEVMS_PIXELFORMAT_RGBA128_FLOAT = 455114768,
    BADGEVMS_PIXELFORMAT_ARGB128_FLOAT = 456163344,
    BADGEVMS_PIXELFORMAT_BGRA128_FLOAT = 458260496,
    BADGEVMS_PIXELFORMAT_ABGR128_FLOAT = 459309072,
    #[doc = "< Planar mode: Y + V + U  (3 planes)"]
    BADGEVMS_PIXELFORMAT_YV12 = 842094169,
    #[doc = "< Planar mode: Y + U + V  (3 planes)"]
    BADGEVMS_PIXELFORMAT_IYUV = 1448433993,
    #[doc = "< Packed mode: Y0+U0+Y1+V0 (1 plane)"]
    BADGEVMS_PIXELFORMAT_YUY2 = 844715353,
    #[doc = "< Packed mode: U0+Y0+V0+Y1 (1 plane)"]
    BADGEVMS_PIXELFORMAT_UYVY = 1498831189,
    #[doc = "< Packed mode: Y0+V0+Y1+U0 (1 plane)"]
    BADGEVMS_PIXELFORMAT_YVYU = 1431918169,
    #[doc = "< Planar mode: Y + U/V interleaved  (2 planes)"]
    BADGEVMS_PIXELFORMAT_NV12 = 842094158,
    #[doc = "< Planar mode: Y + V/U interleaved  (2 planes)"]
    BADGEVMS_PIXELFORMAT_NV21 = 825382478,
    #[doc = "< Planar mode: Y + U/V interleaved  (2 planes)"]
    BADGEVMS_PIXELFORMAT_P010 = 808530000,
    #[doc = "< Android video texture format"]
    BADGEVMS_PIXELFORMAT_EXTERNAL_OES = 542328143,
    #[doc = "< Motion JPEG"]
    BADGEVMS_PIXELFORMAT_MJPG = 1196444237,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct framebuffer_t {
    pub w: u32,
    pub h: u32,
    pub format: pixel_format_t,
    pub pixels: *mut u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of framebuffer_t"][::core::mem::size_of::<framebuffer_t>() - 16usize];
    ["Alignment of framebuffer_t"][::core::mem::align_of::<framebuffer_t>() - 4usize];
    ["Offset of field: framebuffer_t::w"][::core::mem::offset_of!(framebuffer_t, w) - 0usize];
    ["Offset of field: framebuffer_t::h"][::core::mem::offset_of!(framebuffer_t, h) - 4usize];
    ["Offset of field: framebuffer_t::format"]
        [::core::mem::offset_of!(framebuffer_t, format) - 8usize];
    ["Offset of field: framebuffer_t::pixels"]
        [::core::mem::offset_of!(framebuffer_t, pixels) - 12usize];
};
impl window_flag_t {
    pub const WINDOW_FLAG_NONE: window_flag_t = window_flag_t(0);
}
impl window_flag_t {
    pub const WINDOW_FLAG_FULLSCREEN: window_flag_t = window_flag_t(1);
}
impl window_flag_t {
    pub const WINDOW_FLAG_ALWAYS_ON_TOP: window_flag_t = window_flag_t(2);
}
impl window_flag_t {
    pub const WINDOW_FLAG_UNDECORATED: window_flag_t = window_flag_t(4);
}
impl window_flag_t {
    pub const WINDOW_FLAG_MAXIMIZED: window_flag_t = window_flag_t(8);
}
impl window_flag_t {
    pub const WINDOW_FLAG_MAXIMIZED_LEFT: window_flag_t = window_flag_t(16);
}
impl window_flag_t {
    pub const WINDOW_FLAG_MAXIMIZED_RIGHT: window_flag_t = window_flag_t(32);
}
impl window_flag_t {
    pub const WINDOW_FLAG_DOUBLE_BUFFERED: window_flag_t = window_flag_t(64);
}
impl window_flag_t {
    pub const WINDOW_FLAG_LOW_PRIORITY: window_flag_t = window_flag_t(128);
}
impl ::core::ops::BitOr<window_flag_t> for window_flag_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        window_flag_t(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for window_flag_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: window_flag_t) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<window_flag_t> for window_flag_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        window_flag_t(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for window_flag_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: window_flag_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct window_flag_t(pub ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_coords_t {
    pub x: ::core::ffi::c_int,
    pub y: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of window_coords_t"][::core::mem::size_of::<window_coords_t>() - 8usize];
    ["Alignment of window_coords_t"][::core::mem::align_of::<window_coords_t>() - 4usize];
    ["Offset of field: window_coords_t::x"][::core::mem::offset_of!(window_coords_t, x) - 0usize];
    ["Offset of field: window_coords_t::y"][::core::mem::offset_of!(window_coords_t, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_size_t {
    pub w: ::core::ffi::c_int,
    pub h: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of window_size_t"][::core::mem::size_of::<window_size_t>() - 8usize];
    ["Alignment of window_size_t"][::core::mem::align_of::<window_size_t>() - 4usize];
    ["Offset of field: window_size_t::w"][::core::mem::offset_of!(window_size_t, w) - 0usize];
    ["Offset of field: window_size_t::h"][::core::mem::offset_of!(window_size_t, h) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_rect_t {
    pub x: ::core::ffi::c_int,
    pub y: ::core::ffi::c_int,
    pub w: ::core::ffi::c_int,
    pub h: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of window_rect_t"][::core::mem::size_of::<window_rect_t>() - 16usize];
    ["Alignment of window_rect_t"][::core::mem::align_of::<window_rect_t>() - 4usize];
    ["Offset of field: window_rect_t::x"][::core::mem::offset_of!(window_rect_t, x) - 0usize];
    ["Offset of field: window_rect_t::y"][::core::mem::offset_of!(window_rect_t, y) - 4usize];
    ["Offset of field: window_rect_t::w"][::core::mem::offset_of!(window_rect_t, w) - 8usize];
    ["Offset of field: window_rect_t::h"][::core::mem::offset_of!(window_rect_t, h) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window {
    _unused: [u8; 0],
}
pub type window_handle_t = *mut window;
unsafe extern "C" {
    pub fn window_create(
        title: *const ::core::ffi::c_char,
        size: window_size_t,
        flags: window_flag_t,
    ) -> window_handle_t;
}
unsafe extern "C" {
    pub fn window_framebuffer_create(
        window: window_handle_t,
        size: window_size_t,
        pixel_format: pixel_format_t,
    ) -> *mut framebuffer_t;
}
unsafe extern "C" {
    pub fn window_destroy(window: window_handle_t);
}
unsafe extern "C" {
    pub fn window_title_get(window: window_handle_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn window_title_set(window: window_handle_t, title: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn window_position_get(window: window_handle_t) -> window_coords_t;
}
unsafe extern "C" {
    pub fn window_position_set(window: window_handle_t, coords: window_coords_t)
    -> window_coords_t;
}
unsafe extern "C" {
    pub fn window_size_get(window: window_handle_t) -> window_size_t;
}
unsafe extern "C" {
    pub fn window_size_set(window: window_handle_t, size: window_size_t) -> window_size_t;
}
unsafe extern "C" {
    pub fn window_flags_get(window: window_handle_t) -> window_flag_t;
}
unsafe extern "C" {
    pub fn window_flags_set(window: window_handle_t, flags: window_flag_t) -> window_flag_t;
}
unsafe extern "C" {
    pub fn window_framebuffer_size_get(window: window_handle_t) -> window_size_t;
}
unsafe extern "C" {
    pub fn window_framebuffer_size_set(
        window: window_handle_t,
        size: window_size_t,
    ) -> window_size_t;
}
unsafe extern "C" {
    pub fn window_framebuffer_format_get(window: window_handle_t) -> pixel_format_t;
}
unsafe extern "C" {
    pub fn window_framebuffer_get(window: window_handle_t) -> *mut framebuffer_t;
}
unsafe extern "C" {
    pub fn window_present(
        window: window_handle_t,
        block: bool,
        rects: *mut window_rect_t,
        num_rects: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn window_event_poll(window: window_handle_t, block: bool, timeout_msec: u32) -> event_t;
}
unsafe extern "C" {
    pub fn get_screen_info(
        width: *mut ::core::ffi::c_int,
        height: *mut ::core::ffi::c_int,
        format: *mut pixel_format_t,
        refresh_rate: *mut f32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub dd_vfs_idx: u16,
    pub dd_rsv: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DIR"][::core::mem::size_of::<DIR>() - 4usize];
    ["Alignment of DIR"][::core::mem::align_of::<DIR>() - 2usize];
    ["Offset of field: DIR::dd_vfs_idx"][::core::mem::offset_of!(DIR, dd_vfs_idx) - 0usize];
    ["Offset of field: DIR::dd_rsv"][::core::mem::offset_of!(DIR, dd_rsv) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: ino_t,
    pub d_type: u8,
    pub d_name: [::core::ffi::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dirent"][::core::mem::size_of::<dirent>() - 260usize];
    ["Alignment of dirent"][::core::mem::align_of::<dirent>() - 2usize];
    ["Offset of field: dirent::d_ino"][::core::mem::offset_of!(dirent, d_ino) - 0usize];
    ["Offset of field: dirent::d_type"][::core::mem::offset_of!(dirent, d_type) - 2usize];
    ["Offset of field: dirent::d_name"][::core::mem::offset_of!(dirent, d_name) - 3usize];
};
unsafe extern "C" {
    pub fn opendir(name: *const ::core::ffi::c_char) -> *mut DIR;
}
unsafe extern "C" {
    pub fn readdir(pdir: *mut DIR) -> *mut dirent;
}
unsafe extern "C" {
    pub fn rewinddir(pdir: *mut DIR);
}
unsafe extern "C" {
    pub fn closedir(pdir: *mut DIR) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_size: off_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub st_blksize: blksize_t,
    pub st_blocks: blkcnt_t,
    pub st_spare4: [::core::ffi::c_long; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat"][::core::mem::size_of::<stat>() - 88usize];
    ["Alignment of stat"][::core::mem::align_of::<stat>() - 8usize];
    ["Offset of field: stat::st_dev"][::core::mem::offset_of!(stat, st_dev) - 0usize];
    ["Offset of field: stat::st_ino"][::core::mem::offset_of!(stat, st_ino) - 2usize];
    ["Offset of field: stat::st_mode"][::core::mem::offset_of!(stat, st_mode) - 4usize];
    ["Offset of field: stat::st_nlink"][::core::mem::offset_of!(stat, st_nlink) - 8usize];
    ["Offset of field: stat::st_uid"][::core::mem::offset_of!(stat, st_uid) - 10usize];
    ["Offset of field: stat::st_gid"][::core::mem::offset_of!(stat, st_gid) - 12usize];
    ["Offset of field: stat::st_rdev"][::core::mem::offset_of!(stat, st_rdev) - 14usize];
    ["Offset of field: stat::st_size"][::core::mem::offset_of!(stat, st_size) - 16usize];
    ["Offset of field: stat::st_atim"][::core::mem::offset_of!(stat, st_atim) - 24usize];
    ["Offset of field: stat::st_mtim"][::core::mem::offset_of!(stat, st_mtim) - 40usize];
    ["Offset of field: stat::st_ctim"][::core::mem::offset_of!(stat, st_ctim) - 56usize];
    ["Offset of field: stat::st_blksize"][::core::mem::offset_of!(stat, st_blksize) - 72usize];
    ["Offset of field: stat::st_blocks"][::core::mem::offset_of!(stat, st_blocks) - 76usize];
    ["Offset of field: stat::st_spare4"][::core::mem::offset_of!(stat, st_spare4) - 80usize];
};
unsafe extern "C" {
    pub fn fstat(__fd: ::core::ffi::c_int, __sbuf: *mut stat) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mkdir(_path: *const ::core::ffi::c_char, __mode: mode_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn stat(__path: *const ::core::ffi::c_char, __sbuf: *mut stat) -> ::core::ffi::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum device_type_t {
    DEVICE_TYPE_BLOCK = 0,
    DEVICE_TYPE_LCD = 1,
    DEVICE_TYPE_KEYBOARD = 2,
    DEVICE_TYPE_BUS = 3,
    DEVICE_TYPE_WIFI = 4,
    DEVICE_TYPE_ORIENTATION = 5,
    DEVICE_TYPE_SOCKET = 6,
    DEVICE_TYPE_FILESYSTEM = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device {
    pub type_: device_type_t,
    pub _open: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut ::core::ffi::c_void,
            path: *mut path_t,
            flags: ::core::ffi::c_int,
            mode: mode_t,
        ) -> ::core::ffi::c_int,
    >,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut ::core::ffi::c_void,
            fd: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut ::core::ffi::c_void,
            fd: ::core::ffi::c_int,
            buf: *const ::core::ffi::c_void,
            count: size_t,
        ) -> ssize_t,
    >,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut ::core::ffi::c_void,
            fd: ::core::ffi::c_int,
            buf: *mut ::core::ffi::c_void,
            count: size_t,
        ) -> ssize_t,
    >,
    pub _lseek: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut ::core::ffi::c_void,
            fd: ::core::ffi::c_int,
            offset: off_t,
            whence: ::core::ffi::c_int,
        ) -> ssize_t,
    >,
    pub _destroy: ::core::option::Option<unsafe extern "C" fn(dev: *mut ::core::ffi::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device"][::core::mem::size_of::<device>() - 28usize];
    ["Alignment of device"][::core::mem::align_of::<device>() - 4usize];
    ["Offset of field: device::type_"][::core::mem::offset_of!(device, type_) - 0usize];
    ["Offset of field: device::_open"][::core::mem::offset_of!(device, _open) - 4usize];
    ["Offset of field: device::_close"][::core::mem::offset_of!(device, _close) - 8usize];
    ["Offset of field: device::_write"][::core::mem::offset_of!(device, _write) - 12usize];
    ["Offset of field: device::_read"][::core::mem::offset_of!(device, _read) - 16usize];
    ["Offset of field: device::_lseek"][::core::mem::offset_of!(device, _lseek) - 20usize];
    ["Offset of field: device::_destroy"][::core::mem::offset_of!(device, _destroy) - 24usize];
};
pub type device_t = device;
unsafe extern "C" {
    pub fn device_get(name: *const ::core::ffi::c_char) -> *mut device_t;
}
unsafe extern "C" {
    pub fn die(reason: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn vaddr_to_paddr(vaddr: u32) -> u32;
}
unsafe extern "C" {
    pub fn get_mac_address() -> *const ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ota_session_t {
    _unused: [u8; 0],
}
pub type ota_handle_t = *mut ota_session_t;
unsafe extern "C" {
    pub fn ota_session_open() -> ota_handle_t;
}
unsafe extern "C" {
    pub fn ota_write(
        session: ota_handle_t,
        buffer: *mut ::core::ffi::c_void,
        block_size: ::core::ffi::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ota_session_commit(session: ota_handle_t) -> bool;
}
unsafe extern "C" {
    pub fn ota_session_abort(session: ota_handle_t) -> bool;
}
unsafe extern "C" {
    pub fn ota_get_running_version(version: *mut ::core::ffi::c_char) -> bool;
}
unsafe extern "C" {
    pub fn ota_get_invalid_version(version: *mut ::core::ffi::c_char) -> bool;
}
unsafe extern "C" {
    pub fn process_create(
        path: *const ::core::ffi::c_char,
        stack_size: size_t,
        argc: ::core::ffi::c_int,
        argv: *mut *mut ::core::ffi::c_char,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn thread_create(
        thread_entry: ::core::option::Option<
            unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void),
        >,
        user_data: *mut ::core::ffi::c_void,
        stack_size: u16,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn wait(block: bool, timeout_msec: u32) -> pid_t;
}
unsafe extern "C" {
    pub fn task_priority_lower();
}
unsafe extern "C" {
    pub fn task_priority_restore();
}
unsafe extern "C" {
    pub fn get_num_tasks() -> u32;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum wifi_status_t {
    WIFI_DISABLED = 0,
    WIFI_ENABLED = 1,
    WIFI_ASK = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum wifi_connection_status_t {
    WIFI_ERROR = 0,
    WIFI_DISCONNECTED = 1,
    WIFI_CONNECTED = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum wifi_auth_mode_t {
    WIFI_AUTH_NONE = 0,
    WIFI_AUTH_OPEN = 1,
    WIFI_AUTH_WEP = 2,
    WIFI_AUTH_WPA_PSK = 3,
    WIFI_AUTH_WPA2_PSK = 4,
    WIFI_AUTH_WPA_WPA2_PSK = 5,
    WIFI_AUTH_WPA2_ENTERPRISE = 6,
    WIFI_AUTH_WPA3_PSK = 7,
    WIFI_AUTH_WPA2_WPA3_PSK = 8,
    WIFI_AUTH_WAPI_PSK = 9,
    WIFI_AUTH_OWE = 10,
    WIFI_AUTH_WPA3_ENT_192 = 11,
    WIFI_AUTH_DPP = 12,
    WIFI_AUTH_WPA3_ENTERPRISE = 13,
    WIFI_AUTH_WPA2_WPA3_ENTERPRISE = 14,
    WIFI_AUTH_WPA_ENTERPRISE = 15,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_station {
    _unused: [u8; 0],
}
pub type wifi_station_handle = *mut wifi_station;
pub type mac_address_t = [u8; 6usize];
unsafe extern "C" {
    pub fn wifi_get_status() -> wifi_status_t;
}
unsafe extern "C" {
    pub fn wifi_get_connection_status() -> wifi_connection_status_t;
}
unsafe extern "C" {
    pub fn wifi_get_connection_station() -> wifi_station_handle;
}
unsafe extern "C" {
    pub fn wifi_connect() -> wifi_connection_status_t;
}
unsafe extern "C" {
    pub fn wifi_disconnect() -> wifi_connection_status_t;
}
unsafe extern "C" {
    pub fn wifi_scan_free_station(station: wifi_station_handle);
}
unsafe extern "C" {
    pub fn wifi_scan_get_num_results() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wifi_scan_get_result(num: ::core::ffi::c_int) -> wifi_station_handle;
}
unsafe extern "C" {
    pub fn wifi_station_get_ssid(station: wifi_station_handle) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn wifi_station_get_bssid(station: wifi_station_handle) -> *mut mac_address_t;
}
unsafe extern "C" {
    pub fn wifi_station_get_primary_channel(station: wifi_station_handle) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wifi_station_get_secondary_channel(station: wifi_station_handle) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wifi_station_get_rssi(station: wifi_station_handle) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wifi_station_get_mode(station: wifi_station_handle) -> wifi_auth_mode_t;
}
unsafe extern "C" {
    pub fn wifi_station_wps(station: wifi_station_handle) -> bool;
}
pub type CURL = ::core::ffi::c_void;
pub type CURLcode = ::core::ffi::c_int;
pub type CURLoption = ::core::ffi::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum curl_easy_info_t {
    CURLINFO_RESPONSE_CODE = 2097154,
    CURLINFO_CONTENT_LENGTH_DOWNLOAD = 3145731,
    CURLINFO_CONTENT_TYPE = 1048594,
    CURLINFO_EFFECTIVE_URL = 1048577,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_slist {
    pub data: *mut ::core::ffi::c_char,
    pub next: *mut curl_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of curl_slist"][::core::mem::size_of::<curl_slist>() - 8usize];
    ["Alignment of curl_slist"][::core::mem::align_of::<curl_slist>() - 4usize];
    ["Offset of field: curl_slist::data"][::core::mem::offset_of!(curl_slist, data) - 0usize];
    ["Offset of field: curl_slist::next"][::core::mem::offset_of!(curl_slist, next) - 4usize];
};
unsafe extern "C" {
    pub fn curl_easy_init() -> *mut CURL;
}
unsafe extern "C" {
    pub fn curl_easy_setopt(curl: *mut CURL, option: CURLoption, ...) -> CURLcode;
}
unsafe extern "C" {
    pub fn curl_easy_perform(curl: *mut CURL) -> CURLcode;
}
unsafe extern "C" {
    pub fn curl_easy_cleanup(curl: *mut CURL);
}
unsafe extern "C" {
    pub fn curl_easy_getinfo(curl: *mut CURL, info: curl_easy_info_t, ...) -> CURLcode;
}
unsafe extern "C" {
    pub fn curl_easy_strerror(error: CURLcode) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn curl_slist_append(
        list: *mut curl_slist,
        string: *const ::core::ffi::c_char,
    ) -> *mut curl_slist;
}
unsafe extern "C" {
    pub fn curl_slist_free_all(list: *mut curl_slist);
}
unsafe extern "C" {
    pub fn curl_global_init(flags: ::core::ffi::c_long) -> CURLcode;
}
unsafe extern "C" {
    pub fn curl_global_cleanup();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::core::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::core::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::core::mem::offset_of!(in_addr, s_addr) - 0usize];
};
unsafe extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn inet_aton(__cp: *const ::core::ffi::c_char, __inp: *mut in_addr) -> ::core::ffi::c_int;
}
pub type socklen_t = u32;
pub type sa_family_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: u8,
    pub sa_family: sa_family_t,
    pub sa_data: [::core::ffi::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::core::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::core::mem::align_of::<sockaddr>() - 1usize];
    ["Offset of field: sockaddr::sa_len"][::core::mem::offset_of!(sockaddr, sa_len) - 0usize];
    ["Offset of field: sockaddr::sa_family"][::core::mem::offset_of!(sockaddr, sa_family) - 1usize];
    ["Offset of field: sockaddr::sa_data"][::core::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
unsafe extern "C" {
    pub fn accept(
        s: ::core::ffi::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn bind(
        s: ::core::ffi::c_int,
        name: *const sockaddr,
        namelen: socklen_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn connect(
        s: ::core::ffi::c_int,
        name: *const sockaddr,
        namelen: socklen_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn listen(s: ::core::ffi::c_int, backlog: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn socket(
        domain: ::core::ffi::c_int,
        type_: ::core::ffi::c_int,
        protocol: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::core::ffi::c_int,
    pub ai_family: ::core::ffi::c_int,
    pub ai_socktype: ::core::ffi::c_int,
    pub ai_protocol: ::core::ffi::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::core::ffi::c_char,
    pub ai_next: *mut addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo"][::core::mem::size_of::<addrinfo>() - 32usize];
    ["Alignment of addrinfo"][::core::mem::align_of::<addrinfo>() - 4usize];
    ["Offset of field: addrinfo::ai_flags"][::core::mem::offset_of!(addrinfo, ai_flags) - 0usize];
    ["Offset of field: addrinfo::ai_family"][::core::mem::offset_of!(addrinfo, ai_family) - 4usize];
    ["Offset of field: addrinfo::ai_socktype"]
        [::core::mem::offset_of!(addrinfo, ai_socktype) - 8usize];
    ["Offset of field: addrinfo::ai_protocol"]
        [::core::mem::offset_of!(addrinfo, ai_protocol) - 12usize];
    ["Offset of field: addrinfo::ai_addrlen"]
        [::core::mem::offset_of!(addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo::ai_addr"][::core::mem::offset_of!(addrinfo, ai_addr) - 20usize];
    ["Offset of field: addrinfo::ai_canonname"]
        [::core::mem::offset_of!(addrinfo, ai_canonname) - 24usize];
    ["Offset of field: addrinfo::ai_next"][::core::mem::offset_of!(addrinfo, ai_next) - 28usize];
};
unsafe extern "C" {
    pub fn freeaddrinfo(ai: *mut addrinfo);
}
unsafe extern "C" {
    pub fn getaddrinfo(
        nodename: *const ::core::ffi::c_char,
        servname: *const ::core::ffi::c_char,
        hints: *const addrinfo,
        res: *mut *mut addrinfo,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " The signature seems to be like this. idk why it's not in our headers"]
    pub fn diprintf(
        a: ::core::ffi::c_int,
        b: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " The signature seems to be like lgamma_r. I have no idea what it does"]
    pub fn gamma_r(arg1: f64, arg2: *mut ::core::ffi::c_int) -> f64;
}
unsafe extern "C" {
    #[doc = " The signature seems to be like lgammaf_r. I have no idea what it does"]
    pub fn gammaf_r(arg1: f32, arg2: *mut ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    #[doc = " Probably in symbols, because it's in newlib. idk why it is not in our\n headers"]
    pub fn sig2str(
        signum: ::core::ffi::c_int,
        str_: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " Probably in symbols, because it's in newlib. idk why it is not in our\n headers"]
    pub fn str2sig(
        str_: *const ::core::ffi::c_char,
        pnum: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
#[doc = " Restart output."]
pub type cc_t = u8;
pub type speed_t = u32;
pub type tcflag_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    #[doc = " Input modes"]
    pub c_oflag: tcflag_t,
    #[doc = " Output modes"]
    pub c_cflag: tcflag_t,
    #[doc = " Control modes"]
    pub c_lflag: tcflag_t,
    #[doc = " Local modes"]
    pub c_cc: [cc_t; 11usize],
    #[doc = " Control characters"]
    pub c_ispeed: speed_t,
    #[doc = " input baud rate"]
    pub c_ospeed: speed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of termios"][::core::mem::size_of::<termios>() - 28usize];
    ["Alignment of termios"][::core::mem::align_of::<termios>() - 4usize];
    ["Offset of field: termios::c_iflag"][::core::mem::offset_of!(termios, c_iflag) - 0usize];
    ["Offset of field: termios::c_oflag"][::core::mem::offset_of!(termios, c_oflag) - 2usize];
    ["Offset of field: termios::c_cflag"][::core::mem::offset_of!(termios, c_cflag) - 4usize];
    ["Offset of field: termios::c_lflag"][::core::mem::offset_of!(termios, c_lflag) - 6usize];
    ["Offset of field: termios::c_cc"][::core::mem::offset_of!(termios, c_cc) - 8usize];
    ["Offset of field: termios::c_ispeed"][::core::mem::offset_of!(termios, c_ispeed) - 20usize];
    ["Offset of field: termios::c_ospeed"][::core::mem::offset_of!(termios, c_ospeed) - 24usize];
};
unsafe extern "C" {
    #[doc = " @brief Gets the parameters of the terminal\n\n @param fd file descriptor of the terminal\n @param p output termios structure\n @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcgetattr(fd: ::core::ffi::c_int, p: *mut termios) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Sets the parameters of the terminal\n\n @param fd file descriptor of the terminal\n @param optional_actions optional actions\n @param p input termios structure\n @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcsetattr(
        fd: ::core::ffi::c_int,
        optional_actions: ::core::ffi::c_int,
        p: *const termios,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __adddf3(a: f64, b: f64) -> f64;
}
unsafe extern "C" {
    pub fn __subdf3(a: f64, b: f64) -> f64;
}
unsafe extern "C" {
    pub fn __muldf3(a: f64, b: f64) -> f64;
}
unsafe extern "C" {
    pub fn __divdf3(a: f64, b: f64) -> f64;
}
unsafe extern "C" {
    pub fn __eqdf2(a: f64, b: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __gedf2(a: f64, b: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __gtdf2(a: f64, b: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __ledf2(a: f64, b: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __ltdf2(a: f64, b: f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __extendsfdf2(a: f32) -> f64;
}
unsafe extern "C" {
    pub fn __truncdfsf2(a: f64) -> f32;
}
unsafe extern "C" {
    pub fn __extendhfsf2(a: __BindgenFloat16) -> f32;
}
unsafe extern "C" {
    pub fn __truncsfhf2(a: f32) -> __BindgenFloat16;
}
unsafe extern "C" {
    pub fn __fixdfsi(a: f64) -> i32;
}
unsafe extern "C" {
    pub fn __fixdfdi(a: f64) -> i64;
}
unsafe extern "C" {
    pub fn __fixunsdfsi(a: f64) -> u32;
}
unsafe extern "C" {
    pub fn __floatdisf(a: i64) -> f32;
}
unsafe extern "C" {
    pub fn __floatsidf(a: i32) -> f64;
}
unsafe extern "C" {
    pub fn __floatunsidf(a: u32) -> f64;
}
unsafe extern "C" {
    pub fn __divdi3(a: i64, b: i64) -> i64;
}
unsafe extern "C" {
    pub fn __udivdi3(a: u64, b: u64) -> u64;
}
unsafe extern "C" {
    pub fn __umoddi3(a: u64, b: u64) -> u64;
}
unsafe extern "C" {
    pub fn __clzsi2(a: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __popcountsi2(a: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __riscv_save_0();
}
unsafe extern "C" {
    pub fn __riscv_save_1();
}
unsafe extern "C" {
    pub fn __riscv_save_2();
}
unsafe extern "C" {
    pub fn __riscv_save_3();
}
unsafe extern "C" {
    pub fn __riscv_save_4();
}
unsafe extern "C" {
    pub fn __riscv_save_5();
}
unsafe extern "C" {
    pub fn __riscv_save_6();
}
unsafe extern "C" {
    pub fn __riscv_save_7();
}
unsafe extern "C" {
    pub fn __riscv_save_8();
}
unsafe extern "C" {
    pub fn __riscv_save_9();
}
unsafe extern "C" {
    pub fn __riscv_save_10();
}
unsafe extern "C" {
    pub fn __riscv_save_11();
}
unsafe extern "C" {
    pub fn __riscv_save_12();
}
unsafe extern "C" {
    pub fn __riscv_restore_0();
}
unsafe extern "C" {
    pub fn __riscv_restore_1();
}
unsafe extern "C" {
    pub fn __riscv_restore_2();
}
unsafe extern "C" {
    pub fn __riscv_restore_3();
}
unsafe extern "C" {
    pub fn __riscv_restore_4();
}
unsafe extern "C" {
    pub fn __riscv_restore_5();
}
unsafe extern "C" {
    pub fn __riscv_restore_6();
}
unsafe extern "C" {
    pub fn __riscv_restore_7();
}
unsafe extern "C" {
    pub fn __riscv_restore_8();
}
unsafe extern "C" {
    pub fn __riscv_restore_9();
}
unsafe extern "C" {
    pub fn __riscv_restore_10();
}
unsafe extern "C" {
    pub fn __riscv_restore_11();
}
unsafe extern "C" {
    pub fn __riscv_restore_12();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::core::ffi::c_void;
